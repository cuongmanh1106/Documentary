{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Roboto;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green0\blue0;\red0\green176\blue80;}
{\*\generator Riched20 10.0.16299}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9\par
\fs28 7.How many level of testing?\par
\fs22 Testing levels are basically to identify missing areas and prevent overlap and repetition between the development life cycle phases. In software development life cycle models there are defined phases like requirement gathering and analysis, design, coding or implementation, testing and deployment.  Each phase goes through the testing. Hence there are various levels of testing. The various levels of testing are:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf1\fs24 Unit testing\cf0\fs22 : It is basically done by the developers to make sure that their code is working fine and meet the user specifications. They test their piece of code which they have written like classes, functions, interfaces and procedures.\par
{\pntext\f1\'B7\tab}\cf1\fs24 Component testing\cf0\fs22 : It is also called as module testing. The basic difference between the unit testing and component testing is in unit testing the developers test their piece of code but in component testing the whole component is tested. For example, in a student record application there are two modules one which will save the records of the students and other module is to upload the results of the students. Both the modules are developed separately and when they are tested one by one then we call this as a component or module testing.\par
{\pntext\f1\'B7\tab}\cf1\fs24 Integration testing\cf0\fs22 : Integration testing is done when two modules are integrated, in order to test the behavior and functionality of both the modules after integration. Below are few types of integration testing: Big bang integration testing, Top down, Bottom up, Functional incremental.\par
{\pntext\f1\'B7\tab}\cf1\fs24 Component integration testing\cf0\fs22 : In the example above when both the modules or components are integrated then the testing done is called as Component integration testing. This testing is basically done to ensure that the code should not break after integrating the two modules.\par
{\pntext\f1\'B7\tab}\cf1\fs24 System integration testing: \cf0\fs22 System integration testing (SIT) is a testing where testers basically test that in the same environment all the related systems should maintain data integrity and can operate in coordination with other systems.\par
{\pntext\f1\'B7\tab}\cf1\fs24 System testing: \cf0\fs22 In system testing the testers basically test the compatibility of the application with the system.\par
{\pntext\f1\'B7\tab}\cf1\fs24 Acceptance testing: \cf0\fs22 Acceptance testing are basically done to ensure that the requirements of the specification are met.\par
{\pntext\f1\'B7\tab}\cf1\fs24 Alpha testing: \cf0\fs22 Alpha testing is done at the developers site. It is done at the end of the development process\par
{\pntext\f1\'B7\tab}\cf1\fs24 Beta testing: \cf0\fs22 Beta testing is done at the customers site. It is done just before the launch of the product.\par

\pard\sa200\sl276\slmult1\par
\b\fs28 8. What is testplan and describe structure (definde template for testplan (exel file) | (word file)?\b0\fs22\par
\cf1\fs28 -What is testplan:\cf0\fs22\par
A test plan is a detailed document that outlines the test strategy, Testing objectives, resources (manpower, software, hardware) required for testing, test schedule, Test Estimation and test deliverables.\par
\par
The test plan serves as a blueprint to conduct software testing activities as a defined process which is minutely monitored and controlled by the test manager.\par
\par
\cf1\fs24 -TEST PLAN TEMPLATE:\par
\cf0 the format and content of a software test plan vary depending on the processes, standards, and test management tools being implemented. Nevertheless, the following format, which is based on IEEE standard for software test documentation, provides a summary of what a test plan can/should contain.\par
\par
\cf2 Test Plan Identifier:\par
\cf0\par
Provide a unique identifier for the document. (Adhere to the Configuration Management System if you have one.)\par
\cf2 Introduction\cf0 :\par
\par
-Provide an overview of the test plan.\par
-Specify the goals/objectives.\par
-Specify any constraints.\par
\cf2 References\cf0 :\par
\par
List the related documents, with links to them if available, including the following:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Project Plan\par
{\pntext\f1\'B7\tab}Configuration Management Plan\par

\pard\sa200\sl276\slmult1  \par
\par
\cf2 Test Items:\par
\cf0\par
-List the test items (software/products) and their versions.\par
\cf2 Features to be Tested:\par
\cf0\par
-List the features of the software/product to be tested.\par
-Provide references to the Requirements and/or Design specifications of the features to be tested\par
\cf2 Features Not to Be Tested:\par
\cf0\par
-List the features of the software/product which will not be tested.\par
-Specify the reasons these features won\rquote t be tested.\par
\cf2 Approach\cf0 :\par
\par
-Mention the overall approach to testing.\par
-Specify the testing levels [if it\rquote s a Master Test Plan], the testing types, and the testing methods [Manual/Automated; White Box/Black Box/Gray Box]\par
\cf2 Item Pass/Fail Criteria:\par
\cf0\par
-Specify the criteria that will be used to determine whether each test item (software/product) has passed or failed testing.\par
\cf2 Suspension Criteria and Resumption Requirements:\par
\cf0\par
-Specify criteria to be used to suspend the testing activity.\par
-Specify testing activities which must be redone when testing is resumed.\par
\cf2 Test Deliverables:\par
\cf0\par
List test deliverables, and links to them if available, including the following:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Test Plan (this document itself)\par
{\pntext\f1\'B7\tab}Test Cases\par
{\pntext\f1\'B7\tab}Test Scripts\par
{\pntext\f1\'B7\tab}Defect/Enhancement Logs\par
{\pntext\f1\'B7\tab}Test Reports\par

\pard\sa200\sl276\slmult1  \par
\par
\cf2 Test Environment:\par
\cf0\par
-Specify the properties of test environment: hardware, software, network etc.\par
-List any testing or related tools.\par
\cf2 Estimate\cf0 :\par
\par
-Provide a summary of test estimates (cost or effort) and/or provide a link to the detailed estimation.\par
\cf2 Schedule\cf0 :\par
\par
-Provide a summary of the schedule, specifying key test milestones, and/or ---provide a link to the detailed schedule.\par
\cf2 Staffing and Training Needs:\par
\cf0\par
-Specify staffing needs by role and required skills.\par
-Identify training that is necessary to provide those skills, if not already acquired.\cf2\par
Responsibilities:\par
\cf0\par
-List the responsibilities of each team/role/individual.\par
\cf2 Risks:\par
\cf0\par
-List the risks that have been identified.\par
-Specify the mitigation plan and the contingency plan for each risk.\par
\cf2 Assumptions and Dependencies:\par
\cf0\par
-List the assumptions that have been made during the preparation of this plan.\par
-List the dependencies.\par
\cf2 Approvals:\par
\cf0\par
-Specify the names and roles of all persons who must approve the plan.\par
-Provide space for signatures and dates. (If the document is to be printed.)\par
\cf2 TEST PLAN GUIDELINES\par
\cf0\par
-Make the plan concise. Avoid redundancy and superfluousness. If you think you do not need a section that has been mentioned in the template above, go ahead and delete that section in your test plan.\par
-Be specific. For example, when you specify an operating system as a property of a test environment, mention the OS Edition/Version as well, not just the OS Name.\par
-Make use of lists and tables wherever possible. Avoid lengthy paragraphs.\par
-Have the test plan reviewed a number of times prior to baselining it or sending it for approval. The quality of your test plan speaks volumes about the quality of the testing you or your team is going to perform.\par
-Update the plan as and when necessary. An out-dated and unused document stinks and is worse than not having the document in the first place.\fs22\par
\tab\par
}
 